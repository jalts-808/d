apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: My workflow

on:
  push:
    branches:
      - '**'

jobs:
  build:
    steps:
      - name: Checkout repository
        uses: docker://alpine/git
        shell: sh
        run: |
          git clone https://github.com/jalts-808/d.git .

      - name: Set up Python environment
        uses: docker://python:3.12
        shell: sh
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # 1) Install Launchable CLI step
      - name: Install Launchable CLI
        uses: docker://python:3.12
        shell: sh
        # Make sure the token is available
        env:
          LAUNCHABLE_TOKEN: ${{ properties.LaunchableToken }}
        run: |
          pip install --user --upgrade launchable~=1.0

      # 2) Verify Launchable step
      - name: Verify Launchable CLI
        uses: docker://python:3.12
        shell: sh
        env:
          LAUNCHABLE_TOKEN: ${{ properties.LaunchableToken }}
        run: |
          launchable verify || true

      - name: Run migrations
        uses: docker://python:3.12
        shell: sh
        run: |
          . venv/bin/activate
          cd ecom
          python manage.py migrate

      - name: Collect static files
        uses: docker://python:3.12
        shell: sh
        run: |
          . venv/bin/activate
          cd ecom
          python manage.py collectstatic --noinput

      - name: Run tests with Launchable session
        uses: docker://python:3.12
        shell: sh
        continue-on-error: true
        # We need the token again here because each step is a new container
        env:
          LAUNCHABLE_TOKEN: ${{ properties.LaunchableToken }}
        run: |
          . venv/bin/activate
          cd ecom
          # Record a build so Launchable knows which commit these tests belong to
          launchable record build --source . --name "$(git rev-parse HEAD)"
          # Start a test session
          launchable record session pytest --name "$(date +%s)"
          # Actually run the tests
          pytest --maxfail=5 --disable-warnings --junitxml=/workspace/test-results.xml
          ls -l /workspace  # Verify that the test-results.xml file is generated

      - name: Publish test results
        uses: cloudbees-io/publish-test-results@v1
        with:
          test-type: JUnit
          folder-name: /workspace/test-results.xml
